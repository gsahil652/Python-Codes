# -*- coding: utf-8 -*-
"""Agency_workbook

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11mGb7r1HuLebYOCzIGvEwwu_jh1eZfgy
"""

import numpy
import pandas as pd

!pip install gspread

'''from google.colab import files
uploaded = files.upload()'''

source = pd.read_csv("/content/Agency_Source.csv", low_memory=False)

source

target = pd.read_csv("/content/Agency_Target.csv", low_memory=False)

target

widen_value_mapping = pd.read_excel("/content/Widen_Poly123.xlsx", sheet_name= "Value_Mapping", keep_default_na = False)

widen_value_mapping

widen_key_value = pd.read_excel("/content/Widen_Poly123.xlsx", sheet_name= "Key_Value_Mapping", keep_default_na = False)

widen_key_value

df_merge = pd.merge(source,target, left_on = "id ", right_on = "Migration_id")

df_merge

df_agency = widen_value_mapping[widen_value_mapping["Widen_Field"] == "Agency"]

df_agency

def get_agency(x,df_merge,df_agency,widen_key_value):
  #print("Inside function")

  try:


    val1 = str(df_merge["agency_string"].loc[x])
    val2 = str(df_merge["agency_string_multi"].loc[x])
    val3 = str(df_merge["Agency"].loc[x])
    #print(val1)
    #print(type(val2))
    #print(val3)

    # Check if value is NAN or Empty
    if(val1.lower() == "nan" or val1.strip() == ''):
      #print("Inside if")

      ''' It is comparing the values of "Legacy DAM Value column and Val2. If they are equal it will create a list of values from Widen
      value column'''

      sap = list(df_agency[df_agency["Legacy DAM Value"] == val2]["Widen Value"].values)
      print("This is sap1",sap)


      sap = ','.join(map(lambda y: y.strip().replace('"',''),sap)).strip(' ')
      print("This is sap2",sap)

      idx = list(widen_key_value[widen_key_value["Final Key"].isin(sap.split(','))]["Final Value"].values)
      print("This is idx",idx)

      if idx == []:
        idx = [sap]

      else:
        idx = list(map(lambda y: y.strip().replace('"',''), idx))
        idx = list(set(idx))

      if idx == ['']:
        idx = 'nan'

      else:
        idx.sort()
        idx = ','.join(idx)

      val3 = val3.replace('"','')

      if(val3 != "nan" and len(val3)>= 2):
        val3 = val3.split(',')
        val3.sort()
        val3 = ','.join(val3)

      if(val3 == "N/A"):
        val3 = "nan"


      if(val3.strip() == idx):
        print("Success")
        return "Success"

      else:
        print("Fail++++")
        return "Fail"+df_merge["id "].loc[x]+" : "+df_merge["Migration_id"]+" : "+str(idx)+" : "+str(val3)

    elif(val2.lower() == "nan" or val2.strip() == ''):
      #print("Inside elif")
      sap = list(df_agency[df_agency["Legacy DAM Value"] == val1]["Widen Value"].values)
      print("This is sap3",sap)

      sap = ','.join(map(lambda y: y.strip().replace('"',''),sap))
      print("This is sap4", sap)

      idx = list(widen_key_value[widen_key_value["Final Key"].isin(sap.split(','))]["Final Value"].values)
      print("This is idx 2",idx)

      if idx == []:
        idx = [sap]

      else:
        idx = list(map(lambda y: y.strip().replace('"',''), idx))
        idx = list(set(idx))

      if idx == ['']:
        idx = 'nan'

      else:
        idx.sort()
        idx = ','.join(idx)

      val3 = val3.replace('"','')

      if(val3 != "nan" and len(val3)>= 2):
        val3 = val3.split(',')
        val3.sort()
        val3 = ','.join(val3)

      if(val3 == "N/A"):
        val3 = "nan"


      if(val3.strip() == idx):
        print("Success")
        return "Success"

      else:
        print("Fail---")
        return "Fail"+df_merge["id "].loc[x]+" : "+df_merge["Migration_id"]+" : "+str(idx)+" : "+str(val3)

  except Exception:
    print(Exception)


d = pd.DataFrame()

d["agency_str"] = df_merge.index.map(lambda x: get_agency(x,df_merge,df_agency,widen_key_value))
d

